version: '3.9'

services:

  traefik:
    image: "traefik:v3.1"
    container_name: "traefik"
    command:
      - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entryPoints.web.address=:80"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks: 
      - infra

  whoami:
    image: "traefik/whoami"
    container_name: "simple-service"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whoami.rule=Host(`whoami.localhost`)"
      - "traefik.http.routers.whoami.entrypoints=web"
    networks: 
      - infra

  consul-server-1:
    container_name: "consul-server-1"
    restart: always
    image: consul:1.15.4
    ports:
      - "8500:8500"
      - "8600:8600/udp"
      - "8300:8300"
      - "8301:8301"
      - "8301:8301/udp"
      - "8302:8302"
      - "8302:8302/udp"
    volumes:
      - ./consul-config-1.json:/consul/config/consul-config.json
      - consul-data-1:/consul/data
    command: "agent -config-file=/consul/config/consul-config.json"
    networks:
      - infra

  consul-server-2:
    container_name: "consul-server-2"
    restart: always
    image: consul:1.15.4
    ports:
      - "8501:8500"
      - "8601:8600/udp"
      - "8303:8300"
      - "8304:8301"
      - "8304:8301/udp"
      - "8305:8302"
      - "8305:8302/udp"
    volumes:
      - ./consul-config-2.json:/consul/config/consul-config.json
      - consul-data-2:/consul/data
    command: "agent -config-file=/consul/config/consul-config.json"
    networks:
      - infra

  mongo1:
    image: mongo:4.4
    container_name: mongo1
    restart: always
    hostname: mongo1
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    command: mongod --replSet rs0 --keyFile /data/configdb/mongodb-keyfile --bind_ip_all
    volumes:
      - ./mongodb-keyfile:/data/configdb/mongodb-keyfile:ro
      - mongo1_data:/data/db
    networks:
      - infra

  mongo2:
    image: mongo:4.4
    container_name: mongo2
    restart: always
    hostname: mongo2
    ports:
      - 27018:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    command: mongod --replSet rs0 --keyFile /data/configdb/mongodb-keyfile --bind_ip_all
    volumes:
      - ./mongodb-keyfile:/data/configdb/mongodb-keyfile:ro
      - mongo2_data:/data/db
    networks:
      - infra


  init-replica:
    image: mongo:4.4
    container_name: init-replica
    depends_on:
      - mongo1
      - mongo2
    networks:
      - infra
    entrypoint: >
      bash -c "
      echo 'Waiting for MongoDB containers to start...' &&
      until mongo --host mongo1:27017 -u root -p example --authenticationDatabase admin --eval 'db.runCommand({ ping: 1 })'; do
        echo 'Mongo1 is unavailable - sleeping'
        sleep 5
      done &&
      echo 'Mongo1 is up - initiating replica set...' &&
      mongo --host mongo1:27017 -u root -p example --authenticationDatabase admin --eval '
        rs.initiate({
          _id: \"rs0\",
          members: [
            { _id: 0, host: \"mongo1:27017\" },
            { _id: 1, host: \"mongo2:27017\", arbiterOnly: true},
          ]
        })
      ' &&
      echo 'Replica set initiated successfully!'
      "
    restart: "no"

volumes:
  consul-data-1:
  consul-data-2:
  mongo1_data:
  mongo2_data:

networks:
  infra:
    driver: overlay
    external: true
